set nocompatible
execute pathogen#infect()
filetype plugin indent on
set background=dark
colorscheme material
set termguicolors
syntax on
hi Normal guibg=NONE ctermbg=NONE
let g:airline_theme = 'material'
let g:material_theme_style = 'default-community'

set number
set ruler
set showcmd
" move to the found search result as you type it"
set incsearch
" highlight all search results after search submitted
set hlsearch
set backspace=indent,eol,start
set tabstop=2
"below is less useful than following
"set autoindent
set smartindent
set textwidth=80
set expandtab
set shiftwidth=2
set splitbelow
set splitright

"having rustfmt be case sensitive is dumb
cnoreabbrev <silent> rustfmt :RustFmt<cr>

" okay, now we have to fix terminal colors"
let g:terminal_ansi_colors = [
  \'#263238', '#e54b4b', '#9ece58', '#faed70',
  \'#396fe2', '#bb80b3', '#2ddafd', '#d0d0d0',
  \'#555864', '#ff5370', '#c3e88d', '#ffcb6b',
  \'#82aaff', '#c792ea', '#89ddff', '#ffffff' ]

"set the working directory to the current directory always
" set autochdir

"set to save whenever I exit insert mode"
autocmd InsertLeave * write

"disable beeping on error"
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

"bind ctrl-d and ctrl-u to also move the cursor to mid-screen
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

"bind ctrl+hjkl to switch between splits"
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
tnoremap <C-j> <C-W>j
tnoremap <C-k> <C-W>k
tnoremap <C-h> <C-W>h
tnoremap <C-l> <C-W>l

"make tab movements a little more sensible"
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>t<leader> :tabnext<cr>

"Set \e to open the explorer (this obsoletes nerdtree)
nnoremap <leader>e :Explore<cr>

"map leader (\)+[ and \+] to go back and forward in buffers
map <leader>[ :bp<cr>
map <leader>] :bn<cr>

"map leader b to list buffers
"nnoremap <Leader>b :buffers<CR>

"map leader b to list buffers and immediately ask which to jump to
nnoremap <Leader>b :ls<cr>:b<space>

"map leader d to close current buffer
nnoremap <Leader>d :bd<CR>

"bind \<number> to go to that number buffer
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>

"set line numbers to be grey so they're visible in the material theme
highlight LineNR ctermfg=242
"let g:airline_powerline_fonts = 1

"close explorer buffers after closing them
autocmd FileType netrw setl bufhidden=wipe

"Rust has picky spacing
autocmd FileType rs setlocal shiftwidth=4 softtabstop=4 tabstop=4 expandtab

" fzf to ctrl p
nmap <C-P> :GFiles --cached --others --exclude-standard<CR>

" leader p to fzf ripgrep script
nnoremap <Leader>p :Rg<CR>

"I don't like the messy ls output, this function cleans it
function! CloseHiddenBuffers()
    " Tableau pour memoriser la visibilite des buffers                                                                                      
    let visible = {}
    " Pour chaque onglet...
    for t in range(1, tabpagenr('$'))
        " Et pour chacune de ses fenetres...
        for b in tabpagebuflist(t)
            " On indique que le buffer est visible.
            let visible[b] = 1
        endfor
    endfor
    " Pour chaque numero de buffer possible...
    for b in range(1, bufnr('$'))
        " Si b est un numero de buffer valide et qu'il n'est pas visible, on le
        " supprime.
        if bufexists(b) && !has_key(visible, b)
            " On ferme donc tous les buffers qui ne valent pas 1 dans le tableau et qui
            " sont pourtant charges en memoire.
            execute 'bwipeout' b
        endif
    endfor
  endfun

cnoreabbrev <silent> bcl :call CloseHiddenBuffers()<cr>
